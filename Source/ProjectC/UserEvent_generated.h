// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USEREVENT_H_
#define FLATBUFFERS_GENERATED_USEREVENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct S2C_Login;
struct S2C_LoginBuilder;

struct C2S_Login;
struct C2S_LoginBuilder;

struct S2C_Logout;
struct S2C_LogoutBuilder;

struct C2S_Logout;
struct C2S_LogoutBuilder;

struct S2C_CreateAccount;
struct S2C_CreateAccountBuilder;

struct C2S_CreateAccount;
struct C2S_CreateAccountBuilder;

struct ItemData;
struct ItemDataBuilder;

struct S2C_ItemData;
struct S2C_ItemDataBuilder;

struct C2S_ItemData;
struct C2S_ItemDataBuilder;

struct ShopData;
struct ShopDataBuilder;

struct S2C_ShopList;
struct S2C_ShopListBuilder;

struct C2S_ShopList;
struct C2S_ShopListBuilder;

struct S2C_ShopItems;
struct S2C_ShopItemsBuilder;

struct C2S_ShopItems;
struct C2S_ShopItemsBuilder;

struct S2C_ShopTransaction;
struct S2C_ShopTransactionBuilder;

struct C2S_ShopTransaction;
struct C2S_ShopTransactionBuilder;

struct S2C_PlayerData;
struct S2C_PlayerDataBuilder;

struct C2S_PlayerData;
struct C2S_PlayerDataBuilder;

struct MonsterData;
struct MonsterDataBuilder;

struct S2C_MonsterData;
struct S2C_MonsterDataBuilder;

struct C2S_MonsterData;
struct C2S_MonsterDataBuilder;

struct ChatData;
struct ChatDataBuilder;

struct S2C_PlayerChat;
struct S2C_PlayerChatBuilder;

struct C2S_PlayerChat;
struct C2S_PlayerChatBuilder;

struct GameServerData;
struct GameServerDataBuilder;

struct C2S_CreateGameServer;
struct C2S_CreateGameServerBuilder;

struct S2C_CreateGameServer;
struct S2C_CreateGameServerBuilder;

struct C2S_GameServerList;
struct C2S_GameServerListBuilder;

struct S2C_GameServerList;
struct S2C_GameServerListBuilder;

struct C2S_JoinGameServer;
struct C2S_JoinGameServerBuilder;

struct S2C_JoinGameServer;
struct S2C_JoinGameServerBuilder;

struct C2S_CloseGameServer;
struct C2S_CloseGameServerBuilder;

struct S2C_CloseGameServer;
struct S2C_CloseGameServerBuilder;

struct C2S_SavePlayerData;
struct C2S_SavePlayerDataBuilder;

struct S2C_SavePlayerData;
struct S2C_SavePlayerDataBuilder;

struct DatabasePacket;
struct DatabasePacketBuilder;

enum ResultCode : int8_t {
  ResultCode_SUCCESS = 0,
  ResultCode_FAIL = 1,
  ResultCode_INVALID_USER = 2,
  ResultCode_USER_NOT_FOUND = 3,
  ResultCode_INSUFFICIENT_GOLD = 4,
  ResultCode_ITEM_NOT_FOUND = 5,
  ResultCode_SHOP_NOT_FOUND = 6,
  ResultCode_SERVER_NAME_DUPLICATE = 7,
  ResultCode_SERVER_NOT_FOUND = 8,
  ResultCode_SERVER_PASSWORD_WRONG = 9,
  ResultCode_SERVER_FULL = 10,
  ResultCode_NOT_SERVER_OWNER = 11,
  ResultCode_MIN = ResultCode_SUCCESS,
  ResultCode_MAX = ResultCode_NOT_SERVER_OWNER
};

inline const ResultCode (&EnumValuesResultCode())[12] {
  static const ResultCode values[] = {
    ResultCode_SUCCESS,
    ResultCode_FAIL,
    ResultCode_INVALID_USER,
    ResultCode_USER_NOT_FOUND,
    ResultCode_INSUFFICIENT_GOLD,
    ResultCode_ITEM_NOT_FOUND,
    ResultCode_SHOP_NOT_FOUND,
    ResultCode_SERVER_NAME_DUPLICATE,
    ResultCode_SERVER_NOT_FOUND,
    ResultCode_SERVER_PASSWORD_WRONG,
    ResultCode_SERVER_FULL,
    ResultCode_NOT_SERVER_OWNER
  };
  return values;
}

inline const char * const *EnumNamesResultCode() {
  static const char * const names[13] = {
    "SUCCESS",
    "FAIL",
    "INVALID_USER",
    "USER_NOT_FOUND",
    "INSUFFICIENT_GOLD",
    "ITEM_NOT_FOUND",
    "SHOP_NOT_FOUND",
    "SERVER_NAME_DUPLICATE",
    "SERVER_NOT_FOUND",
    "SERVER_PASSWORD_WRONG",
    "SERVER_FULL",
    "NOT_SERVER_OWNER",
    nullptr
  };
  return names;
}

inline const char *EnumNameResultCode(ResultCode e) {
  if (::flatbuffers::IsOutRange(e, ResultCode_SUCCESS, ResultCode_NOT_SERVER_OWNER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResultCode()[index];
}

enum EventType : uint8_t {
  EventType_NONE = 0,
  EventType_S2C_Login = 1,
  EventType_C2S_Login = 2,
  EventType_S2C_Logout = 3,
  EventType_C2S_Logout = 4,
  EventType_S2C_CreateAccount = 5,
  EventType_C2S_CreateAccount = 6,
  EventType_S2C_ItemData = 7,
  EventType_C2S_ItemData = 8,
  EventType_S2C_ShopList = 9,
  EventType_C2S_ShopList = 10,
  EventType_S2C_ShopItems = 11,
  EventType_C2S_ShopItems = 12,
  EventType_S2C_ShopTransaction = 13,
  EventType_C2S_ShopTransaction = 14,
  EventType_S2C_PlayerData = 15,
  EventType_C2S_PlayerData = 16,
  EventType_S2C_MonsterData = 17,
  EventType_C2S_MonsterData = 18,
  EventType_S2C_PlayerChat = 19,
  EventType_C2S_PlayerChat = 20,
  EventType_S2C_CreateGameServer = 21,
  EventType_C2S_CreateGameServer = 22,
  EventType_S2C_GameServerList = 23,
  EventType_C2S_GameServerList = 24,
  EventType_S2C_JoinGameServer = 25,
  EventType_C2S_JoinGameServer = 26,
  EventType_S2C_CloseGameServer = 27,
  EventType_C2S_CloseGameServer = 28,
  EventType_S2C_SavePlayerData = 29,
  EventType_C2S_SavePlayerData = 30,
  EventType_MIN = EventType_NONE,
  EventType_MAX = EventType_C2S_SavePlayerData
};

inline const EventType (&EnumValuesEventType())[31] {
  static const EventType values[] = {
    EventType_NONE,
    EventType_S2C_Login,
    EventType_C2S_Login,
    EventType_S2C_Logout,
    EventType_C2S_Logout,
    EventType_S2C_CreateAccount,
    EventType_C2S_CreateAccount,
    EventType_S2C_ItemData,
    EventType_C2S_ItemData,
    EventType_S2C_ShopList,
    EventType_C2S_ShopList,
    EventType_S2C_ShopItems,
    EventType_C2S_ShopItems,
    EventType_S2C_ShopTransaction,
    EventType_C2S_ShopTransaction,
    EventType_S2C_PlayerData,
    EventType_C2S_PlayerData,
    EventType_S2C_MonsterData,
    EventType_C2S_MonsterData,
    EventType_S2C_PlayerChat,
    EventType_C2S_PlayerChat,
    EventType_S2C_CreateGameServer,
    EventType_C2S_CreateGameServer,
    EventType_S2C_GameServerList,
    EventType_C2S_GameServerList,
    EventType_S2C_JoinGameServer,
    EventType_C2S_JoinGameServer,
    EventType_S2C_CloseGameServer,
    EventType_C2S_CloseGameServer,
    EventType_S2C_SavePlayerData,
    EventType_C2S_SavePlayerData
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[32] = {
    "NONE",
    "S2C_Login",
    "C2S_Login",
    "S2C_Logout",
    "C2S_Logout",
    "S2C_CreateAccount",
    "C2S_CreateAccount",
    "S2C_ItemData",
    "C2S_ItemData",
    "S2C_ShopList",
    "C2S_ShopList",
    "S2C_ShopItems",
    "C2S_ShopItems",
    "S2C_ShopTransaction",
    "C2S_ShopTransaction",
    "S2C_PlayerData",
    "C2S_PlayerData",
    "S2C_MonsterData",
    "C2S_MonsterData",
    "S2C_PlayerChat",
    "C2S_PlayerChat",
    "S2C_CreateGameServer",
    "C2S_CreateGameServer",
    "S2C_GameServerList",
    "C2S_GameServerList",
    "S2C_JoinGameServer",
    "C2S_JoinGameServer",
    "S2C_CloseGameServer",
    "C2S_CloseGameServer",
    "S2C_SavePlayerData",
    "C2S_SavePlayerData",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType_NONE, EventType_C2S_SavePlayerData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventType()[index];
}

template<typename T> struct EventTypeTraits {
  static const EventType enum_value = EventType_NONE;
};

template<> struct EventTypeTraits<S2C_Login> {
  static const EventType enum_value = EventType_S2C_Login;
};

template<> struct EventTypeTraits<C2S_Login> {
  static const EventType enum_value = EventType_C2S_Login;
};

template<> struct EventTypeTraits<S2C_Logout> {
  static const EventType enum_value = EventType_S2C_Logout;
};

template<> struct EventTypeTraits<C2S_Logout> {
  static const EventType enum_value = EventType_C2S_Logout;
};

template<> struct EventTypeTraits<S2C_CreateAccount> {
  static const EventType enum_value = EventType_S2C_CreateAccount;
};

template<> struct EventTypeTraits<C2S_CreateAccount> {
  static const EventType enum_value = EventType_C2S_CreateAccount;
};

template<> struct EventTypeTraits<S2C_ItemData> {
  static const EventType enum_value = EventType_S2C_ItemData;
};

template<> struct EventTypeTraits<C2S_ItemData> {
  static const EventType enum_value = EventType_C2S_ItemData;
};

template<> struct EventTypeTraits<S2C_ShopList> {
  static const EventType enum_value = EventType_S2C_ShopList;
};

template<> struct EventTypeTraits<C2S_ShopList> {
  static const EventType enum_value = EventType_C2S_ShopList;
};

template<> struct EventTypeTraits<S2C_ShopItems> {
  static const EventType enum_value = EventType_S2C_ShopItems;
};

template<> struct EventTypeTraits<C2S_ShopItems> {
  static const EventType enum_value = EventType_C2S_ShopItems;
};

template<> struct EventTypeTraits<S2C_ShopTransaction> {
  static const EventType enum_value = EventType_S2C_ShopTransaction;
};

template<> struct EventTypeTraits<C2S_ShopTransaction> {
  static const EventType enum_value = EventType_C2S_ShopTransaction;
};

template<> struct EventTypeTraits<S2C_PlayerData> {
  static const EventType enum_value = EventType_S2C_PlayerData;
};

template<> struct EventTypeTraits<C2S_PlayerData> {
  static const EventType enum_value = EventType_C2S_PlayerData;
};

template<> struct EventTypeTraits<S2C_MonsterData> {
  static const EventType enum_value = EventType_S2C_MonsterData;
};

template<> struct EventTypeTraits<C2S_MonsterData> {
  static const EventType enum_value = EventType_C2S_MonsterData;
};

template<> struct EventTypeTraits<S2C_PlayerChat> {
  static const EventType enum_value = EventType_S2C_PlayerChat;
};

template<> struct EventTypeTraits<C2S_PlayerChat> {
  static const EventType enum_value = EventType_C2S_PlayerChat;
};

template<> struct EventTypeTraits<S2C_CreateGameServer> {
  static const EventType enum_value = EventType_S2C_CreateGameServer;
};

template<> struct EventTypeTraits<C2S_CreateGameServer> {
  static const EventType enum_value = EventType_C2S_CreateGameServer;
};

template<> struct EventTypeTraits<S2C_GameServerList> {
  static const EventType enum_value = EventType_S2C_GameServerList;
};

template<> struct EventTypeTraits<C2S_GameServerList> {
  static const EventType enum_value = EventType_C2S_GameServerList;
};

template<> struct EventTypeTraits<S2C_JoinGameServer> {
  static const EventType enum_value = EventType_S2C_JoinGameServer;
};

template<> struct EventTypeTraits<C2S_JoinGameServer> {
  static const EventType enum_value = EventType_C2S_JoinGameServer;
};

template<> struct EventTypeTraits<S2C_CloseGameServer> {
  static const EventType enum_value = EventType_S2C_CloseGameServer;
};

template<> struct EventTypeTraits<C2S_CloseGameServer> {
  static const EventType enum_value = EventType_C2S_CloseGameServer;
};

template<> struct EventTypeTraits<S2C_SavePlayerData> {
  static const EventType enum_value = EventType_S2C_SavePlayerData;
};

template<> struct EventTypeTraits<C2S_SavePlayerData> {
  static const EventType enum_value = EventType_C2S_SavePlayerData;
};

bool VerifyEventType(::flatbuffers::Verifier &verifier, const void *obj, EventType type);
bool VerifyEventTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct S2C_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_USERNAME = 8,
    VT_NICKNAME = 10,
    VT_LEVEL = 12
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICKNAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           verifier.EndTable();
  }
};

struct S2C_LoginBuilder {
  typedef S2C_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_Login::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_Login::VT_USER_ID, user_id, 0);
  }
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(S2C_Login::VT_USERNAME, username);
  }
  void add_nickname(::flatbuffers::Offset<::flatbuffers::String> nickname) {
    fbb_.AddOffset(S2C_Login::VT_NICKNAME, nickname);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(S2C_Login::VT_LEVEL, level, 0);
  }
  explicit S2C_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Login> CreateS2C_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nickname = 0,
    uint32_t level = 0) {
  S2C_LoginBuilder builder_(_fbb);
  builder_.add_level(level);
  builder_.add_nickname(nickname);
  builder_.add_username(username);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_Login> CreateS2C_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const char *username = nullptr,
    const char *nickname = nullptr,
    uint32_t level = 0) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return CreateS2C_Login(
      _fbb,
      result,
      user_id,
      username__,
      nickname__,
      level);
}

struct C2S_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C2S_LoginBuilder {
  typedef C2S_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(C2S_Login::VT_USERNAME, username);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C2S_Login::VT_PASSWORD, password);
  }
  explicit C2S_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Login> CreateC2S_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C2S_LoginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_Login> CreateC2S_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateC2S_Login(
      _fbb,
      username__,
      password__);
}

struct S2C_Logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_LogoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MESSAGE = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_LogoutBuilder {
  typedef S2C_Logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_Logout::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_Logout::VT_MESSAGE, message);
  }
  explicit S2C_LogoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Logout> CreateS2C_Logout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_LogoutBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_Logout> CreateS2C_LogoutDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_Logout(
      _fbb,
      result,
      message__);
}

struct C2S_Logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_LogoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           verifier.EndTable();
  }
};

struct C2S_LogoutBuilder {
  typedef C2S_Logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_Logout::VT_USER_ID, user_id, 0);
  }
  explicit C2S_LogoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Logout> CreateC2S_Logout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0) {
  C2S_LogoutBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct S2C_CreateAccount FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_CreateAccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_MESSAGE = 8
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_CreateAccountBuilder {
  typedef S2C_CreateAccount Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_CreateAccount::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_CreateAccount::VT_USER_ID, user_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_CreateAccount::VT_MESSAGE, message);
  }
  explicit S2C_CreateAccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_CreateAccount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_CreateAccount>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_CreateAccount> CreateS2C_CreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_CreateAccountBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_CreateAccount> CreateS2C_CreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_CreateAccount(
      _fbb,
      result,
      user_id,
      message__);
}

struct C2S_CreateAccount FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_CreateAccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6,
    VT_NICKNAME = 8
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  const ::flatbuffers::String *nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           verifier.EndTable();
  }
};

struct C2S_CreateAccountBuilder {
  typedef C2S_CreateAccount Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(C2S_CreateAccount::VT_USERNAME, username);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C2S_CreateAccount::VT_PASSWORD, password);
  }
  void add_nickname(::flatbuffers::Offset<::flatbuffers::String> nickname) {
    fbb_.AddOffset(C2S_CreateAccount::VT_NICKNAME, nickname);
  }
  explicit C2S_CreateAccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_CreateAccount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_CreateAccount>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_CreateAccount> CreateC2S_CreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nickname = 0) {
  C2S_CreateAccountBuilder builder_(_fbb);
  builder_.add_nickname(nickname);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_CreateAccount> CreateC2S_CreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr,
    const char *nickname = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return CreateC2S_CreateAccount(
      _fbb,
      username__,
      password__,
      nickname__);
}

struct ItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM_ID = 4,
    VT_ITEM_NAME = 6,
    VT_ITEM_COUNT = 8,
    VT_ITEM_TYPE = 10,
    VT_BASE_PRICE = 12,
    VT_ATTACK_BONUS = 14,
    VT_DEFENSE_BONUS = 16,
    VT_HP_BONUS = 18,
    VT_MP_BONUS = 20,
    VT_DESCRIPTION = 22
  };
  uint32_t item_id() const {
    return GetField<uint32_t>(VT_ITEM_ID, 0);
  }
  const ::flatbuffers::String *item_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ITEM_NAME);
  }
  uint32_t item_count() const {
    return GetField<uint32_t>(VT_ITEM_COUNT, 0);
  }
  uint32_t item_type() const {
    return GetField<uint32_t>(VT_ITEM_TYPE, 0);
  }
  uint32_t base_price() const {
    return GetField<uint32_t>(VT_BASE_PRICE, 0);
  }
  uint32_t attack_bonus() const {
    return GetField<uint32_t>(VT_ATTACK_BONUS, 0);
  }
  uint32_t defense_bonus() const {
    return GetField<uint32_t>(VT_DEFENSE_BONUS, 0);
  }
  uint32_t hp_bonus() const {
    return GetField<uint32_t>(VT_HP_BONUS, 0);
  }
  uint32_t mp_bonus() const {
    return GetField<uint32_t>(VT_MP_BONUS, 0);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_ID, 4) &&
           VerifyOffset(verifier, VT_ITEM_NAME) &&
           verifier.VerifyString(item_name()) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_COUNT, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_BASE_PRICE, 4) &&
           VerifyField<uint32_t>(verifier, VT_ATTACK_BONUS, 4) &&
           VerifyField<uint32_t>(verifier, VT_DEFENSE_BONUS, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP_BONUS, 4) &&
           VerifyField<uint32_t>(verifier, VT_MP_BONUS, 4) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           verifier.EndTable();
  }
};

struct ItemDataBuilder {
  typedef ItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_item_id(uint32_t item_id) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ITEM_ID, item_id, 0);
  }
  void add_item_name(::flatbuffers::Offset<::flatbuffers::String> item_name) {
    fbb_.AddOffset(ItemData::VT_ITEM_NAME, item_name);
  }
  void add_item_count(uint32_t item_count) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ITEM_COUNT, item_count, 0);
  }
  void add_item_type(uint32_t item_type) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ITEM_TYPE, item_type, 0);
  }
  void add_base_price(uint32_t base_price) {
    fbb_.AddElement<uint32_t>(ItemData::VT_BASE_PRICE, base_price, 0);
  }
  void add_attack_bonus(uint32_t attack_bonus) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ATTACK_BONUS, attack_bonus, 0);
  }
  void add_defense_bonus(uint32_t defense_bonus) {
    fbb_.AddElement<uint32_t>(ItemData::VT_DEFENSE_BONUS, defense_bonus, 0);
  }
  void add_hp_bonus(uint32_t hp_bonus) {
    fbb_.AddElement<uint32_t>(ItemData::VT_HP_BONUS, hp_bonus, 0);
  }
  void add_mp_bonus(uint32_t mp_bonus) {
    fbb_.AddElement<uint32_t>(ItemData::VT_MP_BONUS, mp_bonus, 0);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(ItemData::VT_DESCRIPTION, description);
  }
  explicit ItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemData> CreateItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t item_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> item_name = 0,
    uint32_t item_count = 0,
    uint32_t item_type = 0,
    uint32_t base_price = 0,
    uint32_t attack_bonus = 0,
    uint32_t defense_bonus = 0,
    uint32_t hp_bonus = 0,
    uint32_t mp_bonus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0) {
  ItemDataBuilder builder_(_fbb);
  builder_.add_description(description);
  builder_.add_mp_bonus(mp_bonus);
  builder_.add_hp_bonus(hp_bonus);
  builder_.add_defense_bonus(defense_bonus);
  builder_.add_attack_bonus(attack_bonus);
  builder_.add_base_price(base_price);
  builder_.add_item_type(item_type);
  builder_.add_item_count(item_count);
  builder_.add_item_name(item_name);
  builder_.add_item_id(item_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemData> CreateItemDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t item_id = 0,
    const char *item_name = nullptr,
    uint32_t item_count = 0,
    uint32_t item_type = 0,
    uint32_t base_price = 0,
    uint32_t attack_bonus = 0,
    uint32_t defense_bonus = 0,
    uint32_t hp_bonus = 0,
    uint32_t mp_bonus = 0,
    const char *description = nullptr) {
  auto item_name__ = item_name ? _fbb.CreateString(item_name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  return CreateItemData(
      _fbb,
      item_id,
      item_name__,
      item_count,
      item_type,
      base_price,
      attack_bonus,
      defense_bonus,
      hp_bonus,
      mp_bonus,
      description__);
}

struct S2C_ItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_ItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_ITEMS = 8,
    VT_GOLD = 10
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ItemData>> *items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ItemData>> *>(VT_ITEMS);
  }
  uint32_t gold() const {
    return GetField<uint32_t>(VT_GOLD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           VerifyField<uint32_t>(verifier, VT_GOLD, 4) &&
           verifier.EndTable();
  }
};

struct S2C_ItemDataBuilder {
  typedef S2C_ItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_ItemData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_ItemData::VT_USER_ID, user_id, 0);
  }
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ItemData>>> items) {
    fbb_.AddOffset(S2C_ItemData::VT_ITEMS, items);
  }
  void add_gold(uint32_t gold) {
    fbb_.AddElement<uint32_t>(S2C_ItemData::VT_GOLD, gold, 0);
  }
  explicit S2C_ItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_ItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_ItemData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_ItemData> CreateS2C_ItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ItemData>>> items = 0,
    uint32_t gold = 0) {
  S2C_ItemDataBuilder builder_(_fbb);
  builder_.add_gold(gold);
  builder_.add_items(items);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_ItemData> CreateS2C_ItemDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const std::vector<::flatbuffers::Offset<ItemData>> *items = nullptr,
    uint32_t gold = 0) {
  auto items__ = items ? _fbb.CreateVector<::flatbuffers::Offset<ItemData>>(*items) : 0;
  return CreateS2C_ItemData(
      _fbb,
      result,
      user_id,
      items__,
      gold);
}

struct C2S_ItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_ItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_REQUEST_TYPE = 6,
    VT_ITEM_ID = 8,
    VT_ITEM_COUNT = 10
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t item_id() const {
    return GetField<uint32_t>(VT_ITEM_ID, 0);
  }
  uint32_t item_count() const {
    return GetField<uint32_t>(VT_ITEM_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct C2S_ItemDataBuilder {
  typedef C2S_ItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_USER_ID, user_id, 0);
  }
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_item_id(uint32_t item_id) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_ITEM_ID, item_id, 0);
  }
  void add_item_count(uint32_t item_count) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_ITEM_COUNT, item_count, 0);
  }
  explicit C2S_ItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_ItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_ItemData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_ItemData> CreateC2S_ItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t request_type = 0,
    uint32_t item_id = 0,
    uint32_t item_count = 0) {
  C2S_ItemDataBuilder builder_(_fbb);
  builder_.add_item_count(item_count);
  builder_.add_item_id(item_id);
  builder_.add_request_type(request_type);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct ShopData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShopDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHOP_ID = 4,
    VT_SHOP_NAME = 6,
    VT_SHOP_TYPE = 8,
    VT_MAP_ID = 10,
    VT_POS_X = 12,
    VT_POS_Y = 14
  };
  uint32_t shop_id() const {
    return GetField<uint32_t>(VT_SHOP_ID, 0);
  }
  const ::flatbuffers::String *shop_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHOP_NAME);
  }
  uint32_t shop_type() const {
    return GetField<uint32_t>(VT_SHOP_TYPE, 0);
  }
  uint32_t map_id() const {
    return GetField<uint32_t>(VT_MAP_ID, 0);
  }
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  float pos_y() const {
    return GetField<float>(VT_POS_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SHOP_ID, 4) &&
           VerifyOffset(verifier, VT_SHOP_NAME) &&
           verifier.VerifyString(shop_name()) &&
           VerifyField<uint32_t>(verifier, VT_SHOP_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAP_ID, 4) &&
           VerifyField<float>(verifier, VT_POS_X, 4) &&
           VerifyField<float>(verifier, VT_POS_Y, 4) &&
           verifier.EndTable();
  }
};

struct ShopDataBuilder {
  typedef ShopData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shop_id(uint32_t shop_id) {
    fbb_.AddElement<uint32_t>(ShopData::VT_SHOP_ID, shop_id, 0);
  }
  void add_shop_name(::flatbuffers::Offset<::flatbuffers::String> shop_name) {
    fbb_.AddOffset(ShopData::VT_SHOP_NAME, shop_name);
  }
  void add_shop_type(uint32_t shop_type) {
    fbb_.AddElement<uint32_t>(ShopData::VT_SHOP_TYPE, shop_type, 0);
  }
  void add_map_id(uint32_t map_id) {
    fbb_.AddElement<uint32_t>(ShopData::VT_MAP_ID, map_id, 0);
  }
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(ShopData::VT_POS_X, pos_x, 0.0f);
  }
  void add_pos_y(float pos_y) {
    fbb_.AddElement<float>(ShopData::VT_POS_Y, pos_y, 0.0f);
  }
  explicit ShopDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ShopData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ShopData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ShopData> CreateShopData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t shop_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shop_name = 0,
    uint32_t shop_type = 0,
    uint32_t map_id = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  ShopDataBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_map_id(map_id);
  builder_.add_shop_type(shop_type);
  builder_.add_shop_name(shop_name);
  builder_.add_shop_id(shop_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ShopData> CreateShopDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t shop_id = 0,
    const char *shop_name = nullptr,
    uint32_t shop_type = 0,
    uint32_t map_id = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  auto shop_name__ = shop_name ? _fbb.CreateString(shop_name) : 0;
  return CreateShopData(
      _fbb,
      shop_id,
      shop_name__,
      shop_type,
      map_id,
      pos_x,
      pos_y);
}

struct S2C_ShopList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_ShopListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_SHOPS = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ShopData>> *shops() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ShopData>> *>(VT_SHOPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_SHOPS) &&
           verifier.VerifyVector(shops()) &&
           verifier.VerifyVectorOfTables(shops()) &&
           verifier.EndTable();
  }
};

struct S2C_ShopListBuilder {
  typedef S2C_ShopList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_ShopList::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_shops(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ShopData>>> shops) {
    fbb_.AddOffset(S2C_ShopList::VT_SHOPS, shops);
  }
  explicit S2C_ShopListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_ShopList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_ShopList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_ShopList> CreateS2C_ShopList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ShopData>>> shops = 0) {
  S2C_ShopListBuilder builder_(_fbb);
  builder_.add_shops(shops);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_ShopList> CreateS2C_ShopListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const std::vector<::flatbuffers::Offset<ShopData>> *shops = nullptr) {
  auto shops__ = shops ? _fbb.CreateVector<::flatbuffers::Offset<ShopData>>(*shops) : 0;
  return CreateS2C_ShopList(
      _fbb,
      result,
      shops__);
}

struct C2S_ShopList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_ShopListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_MAP_ID = 6
  };
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t map_id() const {
    return GetField<uint32_t>(VT_MAP_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAP_ID, 4) &&
           verifier.EndTable();
  }
};

struct C2S_ShopListBuilder {
  typedef C2S_ShopList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_ShopList::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_map_id(uint32_t map_id) {
    fbb_.AddElement<uint32_t>(C2S_ShopList::VT_MAP_ID, map_id, 0);
  }
  explicit C2S_ShopListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_ShopList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_ShopList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_ShopList> CreateC2S_ShopList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t map_id = 0) {
  C2S_ShopListBuilder builder_(_fbb);
  builder_.add_map_id(map_id);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

struct S2C_ShopItems FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_ShopItemsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_SHOP_ID = 6,
    VT_ITEMS = 8
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t shop_id() const {
    return GetField<uint32_t>(VT_SHOP_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ItemData>> *items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ItemData>> *>(VT_ITEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_SHOP_ID, 4) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           verifier.EndTable();
  }
};

struct S2C_ShopItemsBuilder {
  typedef S2C_ShopItems Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_ShopItems::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_shop_id(uint32_t shop_id) {
    fbb_.AddElement<uint32_t>(S2C_ShopItems::VT_SHOP_ID, shop_id, 0);
  }
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ItemData>>> items) {
    fbb_.AddOffset(S2C_ShopItems::VT_ITEMS, items);
  }
  explicit S2C_ShopItemsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_ShopItems> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_ShopItems>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_ShopItems> CreateS2C_ShopItems(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t shop_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ItemData>>> items = 0) {
  S2C_ShopItemsBuilder builder_(_fbb);
  builder_.add_items(items);
  builder_.add_shop_id(shop_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_ShopItems> CreateS2C_ShopItemsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t shop_id = 0,
    const std::vector<::flatbuffers::Offset<ItemData>> *items = nullptr) {
  auto items__ = items ? _fbb.CreateVector<::flatbuffers::Offset<ItemData>>(*items) : 0;
  return CreateS2C_ShopItems(
      _fbb,
      result,
      shop_id,
      items__);
}

struct C2S_ShopItems FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_ShopItemsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHOP_ID = 4
  };
  uint32_t shop_id() const {
    return GetField<uint32_t>(VT_SHOP_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SHOP_ID, 4) &&
           verifier.EndTable();
  }
};

struct C2S_ShopItemsBuilder {
  typedef C2S_ShopItems Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shop_id(uint32_t shop_id) {
    fbb_.AddElement<uint32_t>(C2S_ShopItems::VT_SHOP_ID, shop_id, 0);
  }
  explicit C2S_ShopItemsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_ShopItems> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_ShopItems>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_ShopItems> CreateC2S_ShopItems(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t shop_id = 0) {
  C2S_ShopItemsBuilder builder_(_fbb);
  builder_.add_shop_id(shop_id);
  return builder_.Finish();
}

struct S2C_ShopTransaction FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_ShopTransactionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MESSAGE = 6,
    VT_UPDATED_GOLD = 8
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  uint32_t updated_gold() const {
    return GetField<uint32_t>(VT_UPDATED_GOLD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint32_t>(verifier, VT_UPDATED_GOLD, 4) &&
           verifier.EndTable();
  }
};

struct S2C_ShopTransactionBuilder {
  typedef S2C_ShopTransaction Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_ShopTransaction::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_ShopTransaction::VT_MESSAGE, message);
  }
  void add_updated_gold(uint32_t updated_gold) {
    fbb_.AddElement<uint32_t>(S2C_ShopTransaction::VT_UPDATED_GOLD, updated_gold, 0);
  }
  explicit S2C_ShopTransactionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_ShopTransaction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_ShopTransaction>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_ShopTransaction> CreateS2C_ShopTransaction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    uint32_t updated_gold = 0) {
  S2C_ShopTransactionBuilder builder_(_fbb);
  builder_.add_updated_gold(updated_gold);
  builder_.add_message(message);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_ShopTransaction> CreateS2C_ShopTransactionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const char *message = nullptr,
    uint32_t updated_gold = 0) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_ShopTransaction(
      _fbb,
      result,
      message__,
      updated_gold);
}

struct C2S_ShopTransaction FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_ShopTransactionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_SHOP_ID = 6,
    VT_ITEM_ID = 8,
    VT_ITEM_COUNT = 10,
    VT_TRANSACTION_TYPE = 12
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t shop_id() const {
    return GetField<uint32_t>(VT_SHOP_ID, 0);
  }
  uint32_t item_id() const {
    return GetField<uint32_t>(VT_ITEM_ID, 0);
  }
  uint32_t item_count() const {
    return GetField<uint32_t>(VT_ITEM_COUNT, 0);
  }
  uint32_t transaction_type() const {
    return GetField<uint32_t>(VT_TRANSACTION_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SHOP_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_COUNT, 4) &&
           VerifyField<uint32_t>(verifier, VT_TRANSACTION_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct C2S_ShopTransactionBuilder {
  typedef C2S_ShopTransaction Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_ShopTransaction::VT_USER_ID, user_id, 0);
  }
  void add_shop_id(uint32_t shop_id) {
    fbb_.AddElement<uint32_t>(C2S_ShopTransaction::VT_SHOP_ID, shop_id, 0);
  }
  void add_item_id(uint32_t item_id) {
    fbb_.AddElement<uint32_t>(C2S_ShopTransaction::VT_ITEM_ID, item_id, 0);
  }
  void add_item_count(uint32_t item_count) {
    fbb_.AddElement<uint32_t>(C2S_ShopTransaction::VT_ITEM_COUNT, item_count, 0);
  }
  void add_transaction_type(uint32_t transaction_type) {
    fbb_.AddElement<uint32_t>(C2S_ShopTransaction::VT_TRANSACTION_TYPE, transaction_type, 0);
  }
  explicit C2S_ShopTransactionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_ShopTransaction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_ShopTransaction>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_ShopTransaction> CreateC2S_ShopTransaction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t shop_id = 0,
    uint32_t item_id = 0,
    uint32_t item_count = 0,
    uint32_t transaction_type = 0) {
  C2S_ShopTransactionBuilder builder_(_fbb);
  builder_.add_transaction_type(transaction_type);
  builder_.add_item_count(item_count);
  builder_.add_item_id(item_id);
  builder_.add_shop_id(shop_id);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct S2C_PlayerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_PlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_USERNAME = 8,
    VT_NICKNAME = 10,
    VT_LEVEL = 12,
    VT_EXP = 14,
    VT_HP = 16,
    VT_MP = 18,
    VT_ATTACK = 20,
    VT_DEFENSE = 22,
    VT_GOLD = 24,
    VT_MAP_ID = 26,
    VT_POS_X = 28,
    VT_POS_Y = 30
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICKNAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t exp() const {
    return GetField<uint32_t>(VT_EXP, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t mp() const {
    return GetField<uint32_t>(VT_MP, 0);
  }
  uint32_t attack() const {
    return GetField<uint32_t>(VT_ATTACK, 0);
  }
  uint32_t defense() const {
    return GetField<uint32_t>(VT_DEFENSE, 0);
  }
  uint32_t gold() const {
    return GetField<uint32_t>(VT_GOLD, 0);
  }
  uint32_t map_id() const {
    return GetField<uint32_t>(VT_MAP_ID, 0);
  }
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  float pos_y() const {
    return GetField<float>(VT_POS_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_MP, 4) &&
           VerifyField<uint32_t>(verifier, VT_ATTACK, 4) &&
           VerifyField<uint32_t>(verifier, VT_DEFENSE, 4) &&
           VerifyField<uint32_t>(verifier, VT_GOLD, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAP_ID, 4) &&
           VerifyField<float>(verifier, VT_POS_X, 4) &&
           VerifyField<float>(verifier, VT_POS_Y, 4) &&
           verifier.EndTable();
  }
};

struct S2C_PlayerDataBuilder {
  typedef S2C_PlayerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_PlayerData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_USER_ID, user_id, 0);
  }
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(S2C_PlayerData::VT_USERNAME, username);
  }
  void add_nickname(::flatbuffers::Offset<::flatbuffers::String> nickname) {
    fbb_.AddOffset(S2C_PlayerData::VT_NICKNAME, nickname);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_LEVEL, level, 0);
  }
  void add_exp(uint32_t exp) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_EXP, exp, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_HP, hp, 0);
  }
  void add_mp(uint32_t mp) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_MP, mp, 0);
  }
  void add_attack(uint32_t attack) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_ATTACK, attack, 0);
  }
  void add_defense(uint32_t defense) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_DEFENSE, defense, 0);
  }
  void add_gold(uint32_t gold) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_GOLD, gold, 0);
  }
  void add_map_id(uint32_t map_id) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_MAP_ID, map_id, 0);
  }
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(S2C_PlayerData::VT_POS_X, pos_x, 0.0f);
  }
  void add_pos_y(float pos_y) {
    fbb_.AddElement<float>(S2C_PlayerData::VT_POS_Y, pos_y, 0.0f);
  }
  explicit S2C_PlayerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_PlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_PlayerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_PlayerData> CreateS2C_PlayerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nickname = 0,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t gold = 0,
    uint32_t map_id = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  S2C_PlayerDataBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_map_id(map_id);
  builder_.add_gold(gold);
  builder_.add_defense(defense);
  builder_.add_attack(attack);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_exp(exp);
  builder_.add_level(level);
  builder_.add_nickname(nickname);
  builder_.add_username(username);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_PlayerData> CreateS2C_PlayerDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const char *username = nullptr,
    const char *nickname = nullptr,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t gold = 0,
    uint32_t map_id = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return CreateS2C_PlayerData(
      _fbb,
      result,
      user_id,
      username__,
      nickname__,
      level,
      exp,
      hp,
      mp,
      attack,
      defense,
      gold,
      map_id,
      pos_x,
      pos_y);
}

struct C2S_PlayerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_PlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_REQUEST_TYPE = 6,
    VT_LEVEL = 8,
    VT_EXP = 10,
    VT_HP = 12,
    VT_MP = 14,
    VT_POS_X = 16,
    VT_POS_Y = 18
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t exp() const {
    return GetField<uint32_t>(VT_EXP, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t mp() const {
    return GetField<uint32_t>(VT_MP, 0);
  }
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  float pos_y() const {
    return GetField<float>(VT_POS_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_MP, 4) &&
           VerifyField<float>(verifier, VT_POS_X, 4) &&
           VerifyField<float>(verifier, VT_POS_Y, 4) &&
           verifier.EndTable();
  }
};

struct C2S_PlayerDataBuilder {
  typedef C2S_PlayerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_USER_ID, user_id, 0);
  }
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_LEVEL, level, 0);
  }
  void add_exp(uint32_t exp) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_EXP, exp, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_HP, hp, 0);
  }
  void add_mp(uint32_t mp) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_MP, mp, 0);
  }
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(C2S_PlayerData::VT_POS_X, pos_x, 0.0f);
  }
  void add_pos_y(float pos_y) {
    fbb_.AddElement<float>(C2S_PlayerData::VT_POS_Y, pos_y, 0.0f);
  }
  explicit C2S_PlayerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_PlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_PlayerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_PlayerData> CreateC2S_PlayerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t request_type = 0,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  C2S_PlayerDataBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_exp(exp);
  builder_.add_level(level);
  builder_.add_request_type(request_type);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct MonsterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_MONSTER_NAME = 6,
    VT_LEVEL = 8,
    VT_HP = 10,
    VT_ATTACK = 12,
    VT_DEFENSE = 14,
    VT_EXP_REWARD = 16,
    VT_GOLD_REWARD = 18
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  const ::flatbuffers::String *monster_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MONSTER_NAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t attack() const {
    return GetField<uint32_t>(VT_ATTACK, 0);
  }
  uint32_t defense() const {
    return GetField<uint32_t>(VT_DEFENSE, 0);
  }
  uint32_t exp_reward() const {
    return GetField<uint32_t>(VT_EXP_REWARD, 0);
  }
  uint32_t gold_reward() const {
    return GetField<uint32_t>(VT_GOLD_REWARD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_MONSTER_NAME) &&
           verifier.VerifyString(monster_name()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_ATTACK, 4) &&
           VerifyField<uint32_t>(verifier, VT_DEFENSE, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP_REWARD, 4) &&
           VerifyField<uint32_t>(verifier, VT_GOLD_REWARD, 4) &&
           verifier.EndTable();
  }
};

struct MonsterDataBuilder {
  typedef MonsterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_MONSTER_ID, monster_id, 0);
  }
  void add_monster_name(::flatbuffers::Offset<::flatbuffers::String> monster_name) {
    fbb_.AddOffset(MonsterData::VT_MONSTER_NAME, monster_name);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_LEVEL, level, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_HP, hp, 0);
  }
  void add_attack(uint32_t attack) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_ATTACK, attack, 0);
  }
  void add_defense(uint32_t defense) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_DEFENSE, defense, 0);
  }
  void add_exp_reward(uint32_t exp_reward) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_EXP_REWARD, exp_reward, 0);
  }
  void add_gold_reward(uint32_t gold_reward) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_GOLD_REWARD, gold_reward, 0);
  }
  explicit MonsterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterData> CreateMonsterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> monster_name = 0,
    uint32_t level = 0,
    uint32_t hp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t exp_reward = 0,
    uint32_t gold_reward = 0) {
  MonsterDataBuilder builder_(_fbb);
  builder_.add_gold_reward(gold_reward);
  builder_.add_exp_reward(exp_reward);
  builder_.add_defense(defense);
  builder_.add_attack(attack);
  builder_.add_hp(hp);
  builder_.add_level(level);
  builder_.add_monster_name(monster_name);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MonsterData> CreateMonsterDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    const char *monster_name = nullptr,
    uint32_t level = 0,
    uint32_t hp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t exp_reward = 0,
    uint32_t gold_reward = 0) {
  auto monster_name__ = monster_name ? _fbb.CreateString(monster_name) : 0;
  return CreateMonsterData(
      _fbb,
      monster_id,
      monster_name__,
      level,
      hp,
      attack,
      defense,
      exp_reward,
      gold_reward);
}

struct S2C_MonsterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MONSTERS = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>> *monsters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>> *>(VT_MONSTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MONSTERS) &&
           verifier.VerifyVector(monsters()) &&
           verifier.VerifyVectorOfTables(monsters()) &&
           verifier.EndTable();
  }
};

struct S2C_MonsterDataBuilder {
  typedef S2C_MonsterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_MonsterData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_monsters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>>> monsters) {
    fbb_.AddOffset(S2C_MonsterData::VT_MONSTERS, monsters);
  }
  explicit S2C_MonsterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_MonsterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_MonsterData> CreateS2C_MonsterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>>> monsters = 0) {
  S2C_MonsterDataBuilder builder_(_fbb);
  builder_.add_monsters(monsters);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_MonsterData> CreateS2C_MonsterDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const std::vector<::flatbuffers::Offset<MonsterData>> *monsters = nullptr) {
  auto monsters__ = monsters ? _fbb.CreateVector<::flatbuffers::Offset<MonsterData>>(*monsters) : 0;
  return CreateS2C_MonsterData(
      _fbb,
      result,
      monsters__);
}

struct C2S_MonsterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_MONSTER_ID = 6,
    VT_MONSTER_DATA = 8
  };
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  const MonsterData *monster_data() const {
    return GetPointer<const MonsterData *>(VT_MONSTER_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_MONSTER_DATA) &&
           verifier.VerifyTable(monster_data()) &&
           verifier.EndTable();
  }
};

struct C2S_MonsterDataBuilder {
  typedef C2S_MonsterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_MonsterData::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(C2S_MonsterData::VT_MONSTER_ID, monster_id, 0);
  }
  void add_monster_data(::flatbuffers::Offset<MonsterData> monster_data) {
    fbb_.AddOffset(C2S_MonsterData::VT_MONSTER_DATA, monster_data);
  }
  explicit C2S_MonsterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_MonsterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_MonsterData> CreateC2S_MonsterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<MonsterData> monster_data = 0) {
  C2S_MonsterDataBuilder builder_(_fbb);
  builder_.add_monster_data(monster_data);
  builder_.add_monster_id(monster_id);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

struct ChatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAT_ID = 4,
    VT_SENDER_ID = 6,
    VT_SENDER_NAME = 8,
    VT_MESSAGE = 10,
    VT_CHAT_TYPE = 12,
    VT_TIMESTAMP = 14
  };
  uint32_t chat_id() const {
    return GetField<uint32_t>(VT_CHAT_ID, 0);
  }
  uint32_t sender_id() const {
    return GetField<uint32_t>(VT_SENDER_ID, 0);
  }
  const ::flatbuffers::String *sender_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENDER_NAME);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  uint32_t chat_type() const {
    return GetField<uint32_t>(VT_CHAT_TYPE, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CHAT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SENDER_ID, 4) &&
           VerifyOffset(verifier, VT_SENDER_NAME) &&
           verifier.VerifyString(sender_name()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint32_t>(verifier, VT_CHAT_TYPE, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct ChatDataBuilder {
  typedef ChatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_chat_id(uint32_t chat_id) {
    fbb_.AddElement<uint32_t>(ChatData::VT_CHAT_ID, chat_id, 0);
  }
  void add_sender_id(uint32_t sender_id) {
    fbb_.AddElement<uint32_t>(ChatData::VT_SENDER_ID, sender_id, 0);
  }
  void add_sender_name(::flatbuffers::Offset<::flatbuffers::String> sender_name) {
    fbb_.AddOffset(ChatData::VT_SENDER_NAME, sender_name);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(ChatData::VT_MESSAGE, message);
  }
  void add_chat_type(uint32_t chat_type) {
    fbb_.AddElement<uint32_t>(ChatData::VT_CHAT_TYPE, chat_type, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(ChatData::VT_TIMESTAMP, timestamp, 0);
  }
  explicit ChatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChatData> CreateChatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t chat_id = 0,
    uint32_t sender_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sender_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    uint32_t chat_type = 0,
    uint64_t timestamp = 0) {
  ChatDataBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_chat_type(chat_type);
  builder_.add_message(message);
  builder_.add_sender_name(sender_name);
  builder_.add_sender_id(sender_id);
  builder_.add_chat_id(chat_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChatData> CreateChatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t chat_id = 0,
    uint32_t sender_id = 0,
    const char *sender_name = nullptr,
    const char *message = nullptr,
    uint32_t chat_type = 0,
    uint64_t timestamp = 0) {
  auto sender_name__ = sender_name ? _fbb.CreateString(sender_name) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateChatData(
      _fbb,
      chat_id,
      sender_id,
      sender_name__,
      message__,
      chat_type,
      timestamp);
}

struct S2C_PlayerChat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_PlayerChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_CHATS = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ChatData>> *chats() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ChatData>> *>(VT_CHATS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_CHATS) &&
           verifier.VerifyVector(chats()) &&
           verifier.VerifyVectorOfTables(chats()) &&
           verifier.EndTable();
  }
};

struct S2C_PlayerChatBuilder {
  typedef S2C_PlayerChat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_PlayerChat::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_chats(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ChatData>>> chats) {
    fbb_.AddOffset(S2C_PlayerChat::VT_CHATS, chats);
  }
  explicit S2C_PlayerChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_PlayerChat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_PlayerChat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_PlayerChat> CreateS2C_PlayerChat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ChatData>>> chats = 0) {
  S2C_PlayerChatBuilder builder_(_fbb);
  builder_.add_chats(chats);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_PlayerChat> CreateS2C_PlayerChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const std::vector<::flatbuffers::Offset<ChatData>> *chats = nullptr) {
  auto chats__ = chats ? _fbb.CreateVector<::flatbuffers::Offset<ChatData>>(*chats) : 0;
  return CreateS2C_PlayerChat(
      _fbb,
      result,
      chats__);
}

struct C2S_PlayerChat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_PlayerChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_SENDER_ID = 6,
    VT_RECEIVER_ID = 8,
    VT_MESSAGE = 10,
    VT_CHAT_TYPE = 12
  };
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t sender_id() const {
    return GetField<uint32_t>(VT_SENDER_ID, 0);
  }
  uint32_t receiver_id() const {
    return GetField<uint32_t>(VT_RECEIVER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  uint32_t chat_type() const {
    return GetField<uint32_t>(VT_CHAT_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_SENDER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_RECEIVER_ID, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint32_t>(verifier, VT_CHAT_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct C2S_PlayerChatBuilder {
  typedef C2S_PlayerChat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_sender_id(uint32_t sender_id) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_SENDER_ID, sender_id, 0);
  }
  void add_receiver_id(uint32_t receiver_id) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_RECEIVER_ID, receiver_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(C2S_PlayerChat::VT_MESSAGE, message);
  }
  void add_chat_type(uint32_t chat_type) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_CHAT_TYPE, chat_type, 0);
  }
  explicit C2S_PlayerChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_PlayerChat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_PlayerChat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_PlayerChat> CreateC2S_PlayerChat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t sender_id = 0,
    uint32_t receiver_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    uint32_t chat_type = 0) {
  C2S_PlayerChatBuilder builder_(_fbb);
  builder_.add_chat_type(chat_type);
  builder_.add_message(message);
  builder_.add_receiver_id(receiver_id);
  builder_.add_sender_id(sender_id);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_PlayerChat> CreateC2S_PlayerChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t sender_id = 0,
    uint32_t receiver_id = 0,
    const char *message = nullptr,
    uint32_t chat_type = 0) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateC2S_PlayerChat(
      _fbb,
      request_type,
      sender_id,
      receiver_id,
      message__,
      chat_type);
}

struct GameServerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameServerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVER_ID = 4,
    VT_SERVER_NAME = 6,
    VT_SERVER_IP = 8,
    VT_SERVER_PORT = 10,
    VT_OWNER_USER_ID = 12,
    VT_OWNER_NICKNAME = 14,
    VT_CURRENT_PLAYERS = 16,
    VT_MAX_PLAYERS = 18,
    VT_HAS_PASSWORD = 20
  };
  uint32_t server_id() const {
    return GetField<uint32_t>(VT_SERVER_ID, 0);
  }
  const ::flatbuffers::String *server_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_NAME);
  }
  const ::flatbuffers::String *server_ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_IP);
  }
  uint32_t server_port() const {
    return GetField<uint32_t>(VT_SERVER_PORT, 0);
  }
  uint32_t owner_user_id() const {
    return GetField<uint32_t>(VT_OWNER_USER_ID, 0);
  }
  const ::flatbuffers::String *owner_nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNER_NICKNAME);
  }
  uint32_t current_players() const {
    return GetField<uint32_t>(VT_CURRENT_PLAYERS, 0);
  }
  uint32_t max_players() const {
    return GetField<uint32_t>(VT_MAX_PLAYERS, 0);
  }
  bool has_password() const {
    return GetField<uint8_t>(VT_HAS_PASSWORD, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_ID, 4) &&
           VerifyOffset(verifier, VT_SERVER_NAME) &&
           verifier.VerifyString(server_name()) &&
           VerifyOffset(verifier, VT_SERVER_IP) &&
           verifier.VerifyString(server_ip()) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_PORT, 4) &&
           VerifyField<uint32_t>(verifier, VT_OWNER_USER_ID, 4) &&
           VerifyOffset(verifier, VT_OWNER_NICKNAME) &&
           verifier.VerifyString(owner_nickname()) &&
           VerifyField<uint32_t>(verifier, VT_CURRENT_PLAYERS, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAX_PLAYERS, 4) &&
           VerifyField<uint8_t>(verifier, VT_HAS_PASSWORD, 1) &&
           verifier.EndTable();
  }
};

struct GameServerDataBuilder {
  typedef GameServerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_server_id(uint32_t server_id) {
    fbb_.AddElement<uint32_t>(GameServerData::VT_SERVER_ID, server_id, 0);
  }
  void add_server_name(::flatbuffers::Offset<::flatbuffers::String> server_name) {
    fbb_.AddOffset(GameServerData::VT_SERVER_NAME, server_name);
  }
  void add_server_ip(::flatbuffers::Offset<::flatbuffers::String> server_ip) {
    fbb_.AddOffset(GameServerData::VT_SERVER_IP, server_ip);
  }
  void add_server_port(uint32_t server_port) {
    fbb_.AddElement<uint32_t>(GameServerData::VT_SERVER_PORT, server_port, 0);
  }
  void add_owner_user_id(uint32_t owner_user_id) {
    fbb_.AddElement<uint32_t>(GameServerData::VT_OWNER_USER_ID, owner_user_id, 0);
  }
  void add_owner_nickname(::flatbuffers::Offset<::flatbuffers::String> owner_nickname) {
    fbb_.AddOffset(GameServerData::VT_OWNER_NICKNAME, owner_nickname);
  }
  void add_current_players(uint32_t current_players) {
    fbb_.AddElement<uint32_t>(GameServerData::VT_CURRENT_PLAYERS, current_players, 0);
  }
  void add_max_players(uint32_t max_players) {
    fbb_.AddElement<uint32_t>(GameServerData::VT_MAX_PLAYERS, max_players, 0);
  }
  void add_has_password(bool has_password) {
    fbb_.AddElement<uint8_t>(GameServerData::VT_HAS_PASSWORD, static_cast<uint8_t>(has_password), 0);
  }
  explicit GameServerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameServerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameServerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameServerData> CreateGameServerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t server_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> server_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> server_ip = 0,
    uint32_t server_port = 0,
    uint32_t owner_user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> owner_nickname = 0,
    uint32_t current_players = 0,
    uint32_t max_players = 0,
    bool has_password = false) {
  GameServerDataBuilder builder_(_fbb);
  builder_.add_max_players(max_players);
  builder_.add_current_players(current_players);
  builder_.add_owner_nickname(owner_nickname);
  builder_.add_owner_user_id(owner_user_id);
  builder_.add_server_port(server_port);
  builder_.add_server_ip(server_ip);
  builder_.add_server_name(server_name);
  builder_.add_server_id(server_id);
  builder_.add_has_password(has_password);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameServerData> CreateGameServerDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t server_id = 0,
    const char *server_name = nullptr,
    const char *server_ip = nullptr,
    uint32_t server_port = 0,
    uint32_t owner_user_id = 0,
    const char *owner_nickname = nullptr,
    uint32_t current_players = 0,
    uint32_t max_players = 0,
    bool has_password = false) {
  auto server_name__ = server_name ? _fbb.CreateString(server_name) : 0;
  auto server_ip__ = server_ip ? _fbb.CreateString(server_ip) : 0;
  auto owner_nickname__ = owner_nickname ? _fbb.CreateString(owner_nickname) : 0;
  return CreateGameServerData(
      _fbb,
      server_id,
      server_name__,
      server_ip__,
      server_port,
      owner_user_id,
      owner_nickname__,
      current_players,
      max_players,
      has_password);
}

struct C2S_CreateGameServer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_CreateGameServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_SERVER_NAME = 6,
    VT_SERVER_PASSWORD = 8,
    VT_SERVER_IP = 10,
    VT_SERVER_PORT = 12,
    VT_MAX_PLAYERS = 14
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *server_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_NAME);
  }
  const ::flatbuffers::String *server_password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_PASSWORD);
  }
  const ::flatbuffers::String *server_ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_IP);
  }
  uint32_t server_port() const {
    return GetField<uint32_t>(VT_SERVER_PORT, 0);
  }
  uint32_t max_players() const {
    return GetField<uint32_t>(VT_MAX_PLAYERS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_SERVER_NAME) &&
           verifier.VerifyString(server_name()) &&
           VerifyOffset(verifier, VT_SERVER_PASSWORD) &&
           verifier.VerifyString(server_password()) &&
           VerifyOffset(verifier, VT_SERVER_IP) &&
           verifier.VerifyString(server_ip()) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_PORT, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAX_PLAYERS, 4) &&
           verifier.EndTable();
  }
};

struct C2S_CreateGameServerBuilder {
  typedef C2S_CreateGameServer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_CreateGameServer::VT_USER_ID, user_id, 0);
  }
  void add_server_name(::flatbuffers::Offset<::flatbuffers::String> server_name) {
    fbb_.AddOffset(C2S_CreateGameServer::VT_SERVER_NAME, server_name);
  }
  void add_server_password(::flatbuffers::Offset<::flatbuffers::String> server_password) {
    fbb_.AddOffset(C2S_CreateGameServer::VT_SERVER_PASSWORD, server_password);
  }
  void add_server_ip(::flatbuffers::Offset<::flatbuffers::String> server_ip) {
    fbb_.AddOffset(C2S_CreateGameServer::VT_SERVER_IP, server_ip);
  }
  void add_server_port(uint32_t server_port) {
    fbb_.AddElement<uint32_t>(C2S_CreateGameServer::VT_SERVER_PORT, server_port, 0);
  }
  void add_max_players(uint32_t max_players) {
    fbb_.AddElement<uint32_t>(C2S_CreateGameServer::VT_MAX_PLAYERS, max_players, 0);
  }
  explicit C2S_CreateGameServerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_CreateGameServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_CreateGameServer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_CreateGameServer> CreateC2S_CreateGameServer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> server_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> server_password = 0,
    ::flatbuffers::Offset<::flatbuffers::String> server_ip = 0,
    uint32_t server_port = 0,
    uint32_t max_players = 0) {
  C2S_CreateGameServerBuilder builder_(_fbb);
  builder_.add_max_players(max_players);
  builder_.add_server_port(server_port);
  builder_.add_server_ip(server_ip);
  builder_.add_server_password(server_password);
  builder_.add_server_name(server_name);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_CreateGameServer> CreateC2S_CreateGameServerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    const char *server_name = nullptr,
    const char *server_password = nullptr,
    const char *server_ip = nullptr,
    uint32_t server_port = 0,
    uint32_t max_players = 0) {
  auto server_name__ = server_name ? _fbb.CreateString(server_name) : 0;
  auto server_password__ = server_password ? _fbb.CreateString(server_password) : 0;
  auto server_ip__ = server_ip ? _fbb.CreateString(server_ip) : 0;
  return CreateC2S_CreateGameServer(
      _fbb,
      user_id,
      server_name__,
      server_password__,
      server_ip__,
      server_port,
      max_players);
}

struct S2C_CreateGameServer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_CreateGameServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_SERVER_ID = 6,
    VT_MESSAGE = 8
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t server_id() const {
    return GetField<uint32_t>(VT_SERVER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_ID, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_CreateGameServerBuilder {
  typedef S2C_CreateGameServer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_CreateGameServer::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_server_id(uint32_t server_id) {
    fbb_.AddElement<uint32_t>(S2C_CreateGameServer::VT_SERVER_ID, server_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_CreateGameServer::VT_MESSAGE, message);
  }
  explicit S2C_CreateGameServerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_CreateGameServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_CreateGameServer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_CreateGameServer> CreateS2C_CreateGameServer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t server_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_CreateGameServerBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_server_id(server_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_CreateGameServer> CreateS2C_CreateGameServerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t server_id = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_CreateGameServer(
      _fbb,
      result,
      server_id,
      message__);
}

struct C2S_GameServerList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_GameServerListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4
  };
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct C2S_GameServerListBuilder {
  typedef C2S_GameServerList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_GameServerList::VT_REQUEST_TYPE, request_type, 0);
  }
  explicit C2S_GameServerListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_GameServerList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_GameServerList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_GameServerList> CreateC2S_GameServerList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0) {
  C2S_GameServerListBuilder builder_(_fbb);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

struct S2C_GameServerList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_GameServerListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_SERVERS = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<GameServerData>> *servers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<GameServerData>> *>(VT_SERVERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_SERVERS) &&
           verifier.VerifyVector(servers()) &&
           verifier.VerifyVectorOfTables(servers()) &&
           verifier.EndTable();
  }
};

struct S2C_GameServerListBuilder {
  typedef S2C_GameServerList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_GameServerList::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_servers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GameServerData>>> servers) {
    fbb_.AddOffset(S2C_GameServerList::VT_SERVERS, servers);
  }
  explicit S2C_GameServerListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_GameServerList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_GameServerList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_GameServerList> CreateS2C_GameServerList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GameServerData>>> servers = 0) {
  S2C_GameServerListBuilder builder_(_fbb);
  builder_.add_servers(servers);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_GameServerList> CreateS2C_GameServerListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const std::vector<::flatbuffers::Offset<GameServerData>> *servers = nullptr) {
  auto servers__ = servers ? _fbb.CreateVector<::flatbuffers::Offset<GameServerData>>(*servers) : 0;
  return CreateS2C_GameServerList(
      _fbb,
      result,
      servers__);
}

struct C2S_JoinGameServer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_JoinGameServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_SERVER_ID = 6,
    VT_SERVER_PASSWORD = 8
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t server_id() const {
    return GetField<uint32_t>(VT_SERVER_ID, 0);
  }
  const ::flatbuffers::String *server_password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_ID, 4) &&
           VerifyOffset(verifier, VT_SERVER_PASSWORD) &&
           verifier.VerifyString(server_password()) &&
           verifier.EndTable();
  }
};

struct C2S_JoinGameServerBuilder {
  typedef C2S_JoinGameServer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_JoinGameServer::VT_USER_ID, user_id, 0);
  }
  void add_server_id(uint32_t server_id) {
    fbb_.AddElement<uint32_t>(C2S_JoinGameServer::VT_SERVER_ID, server_id, 0);
  }
  void add_server_password(::flatbuffers::Offset<::flatbuffers::String> server_password) {
    fbb_.AddOffset(C2S_JoinGameServer::VT_SERVER_PASSWORD, server_password);
  }
  explicit C2S_JoinGameServerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_JoinGameServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_JoinGameServer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_JoinGameServer> CreateC2S_JoinGameServer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t server_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> server_password = 0) {
  C2S_JoinGameServerBuilder builder_(_fbb);
  builder_.add_server_password(server_password);
  builder_.add_server_id(server_id);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_JoinGameServer> CreateC2S_JoinGameServerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t server_id = 0,
    const char *server_password = nullptr) {
  auto server_password__ = server_password ? _fbb.CreateString(server_password) : 0;
  return CreateC2S_JoinGameServer(
      _fbb,
      user_id,
      server_id,
      server_password__);
}

struct S2C_JoinGameServer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_JoinGameServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_SERVER_IP = 6,
    VT_SERVER_PORT = 8,
    VT_MESSAGE = 10
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *server_ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_IP);
  }
  uint32_t server_port() const {
    return GetField<uint32_t>(VT_SERVER_PORT, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_SERVER_IP) &&
           verifier.VerifyString(server_ip()) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_PORT, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_JoinGameServerBuilder {
  typedef S2C_JoinGameServer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_JoinGameServer::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_server_ip(::flatbuffers::Offset<::flatbuffers::String> server_ip) {
    fbb_.AddOffset(S2C_JoinGameServer::VT_SERVER_IP, server_ip);
  }
  void add_server_port(uint32_t server_port) {
    fbb_.AddElement<uint32_t>(S2C_JoinGameServer::VT_SERVER_PORT, server_port, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_JoinGameServer::VT_MESSAGE, message);
  }
  explicit S2C_JoinGameServerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_JoinGameServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_JoinGameServer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_JoinGameServer> CreateS2C_JoinGameServer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> server_ip = 0,
    uint32_t server_port = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_JoinGameServerBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_server_port(server_port);
  builder_.add_server_ip(server_ip);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_JoinGameServer> CreateS2C_JoinGameServerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const char *server_ip = nullptr,
    uint32_t server_port = 0,
    const char *message = nullptr) {
  auto server_ip__ = server_ip ? _fbb.CreateString(server_ip) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_JoinGameServer(
      _fbb,
      result,
      server_ip__,
      server_port,
      message__);
}

struct C2S_CloseGameServer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_CloseGameServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_SERVER_ID = 6
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t server_id() const {
    return GetField<uint32_t>(VT_SERVER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SERVER_ID, 4) &&
           verifier.EndTable();
  }
};

struct C2S_CloseGameServerBuilder {
  typedef C2S_CloseGameServer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_CloseGameServer::VT_USER_ID, user_id, 0);
  }
  void add_server_id(uint32_t server_id) {
    fbb_.AddElement<uint32_t>(C2S_CloseGameServer::VT_SERVER_ID, server_id, 0);
  }
  explicit C2S_CloseGameServerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_CloseGameServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_CloseGameServer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_CloseGameServer> CreateC2S_CloseGameServer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t server_id = 0) {
  C2S_CloseGameServerBuilder builder_(_fbb);
  builder_.add_server_id(server_id);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct S2C_CloseGameServer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_CloseGameServerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MESSAGE = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_CloseGameServerBuilder {
  typedef S2C_CloseGameServer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_CloseGameServer::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_CloseGameServer::VT_MESSAGE, message);
  }
  explicit S2C_CloseGameServerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_CloseGameServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_CloseGameServer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_CloseGameServer> CreateS2C_CloseGameServer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_CloseGameServerBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_CloseGameServer> CreateS2C_CloseGameServerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_CloseGameServer(
      _fbb,
      result,
      message__);
}

struct C2S_SavePlayerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_SavePlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_LEVEL = 6,
    VT_EXP = 8,
    VT_HP = 10,
    VT_MP = 12,
    VT_GOLD = 14,
    VT_POS_X = 16,
    VT_POS_Y = 18
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t exp() const {
    return GetField<uint32_t>(VT_EXP, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t mp() const {
    return GetField<uint32_t>(VT_MP, 0);
  }
  uint32_t gold() const {
    return GetField<uint32_t>(VT_GOLD, 0);
  }
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  float pos_y() const {
    return GetField<float>(VT_POS_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_MP, 4) &&
           VerifyField<uint32_t>(verifier, VT_GOLD, 4) &&
           VerifyField<float>(verifier, VT_POS_X, 4) &&
           VerifyField<float>(verifier, VT_POS_Y, 4) &&
           verifier.EndTable();
  }
};

struct C2S_SavePlayerDataBuilder {
  typedef C2S_SavePlayerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_SavePlayerData::VT_USER_ID, user_id, 0);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(C2S_SavePlayerData::VT_LEVEL, level, 0);
  }
  void add_exp(uint32_t exp) {
    fbb_.AddElement<uint32_t>(C2S_SavePlayerData::VT_EXP, exp, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(C2S_SavePlayerData::VT_HP, hp, 0);
  }
  void add_mp(uint32_t mp) {
    fbb_.AddElement<uint32_t>(C2S_SavePlayerData::VT_MP, mp, 0);
  }
  void add_gold(uint32_t gold) {
    fbb_.AddElement<uint32_t>(C2S_SavePlayerData::VT_GOLD, gold, 0);
  }
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(C2S_SavePlayerData::VT_POS_X, pos_x, 0.0f);
  }
  void add_pos_y(float pos_y) {
    fbb_.AddElement<float>(C2S_SavePlayerData::VT_POS_Y, pos_y, 0.0f);
  }
  explicit C2S_SavePlayerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_SavePlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_SavePlayerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_SavePlayerData> CreateC2S_SavePlayerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    uint32_t gold = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  C2S_SavePlayerDataBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_gold(gold);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_exp(exp);
  builder_.add_level(level);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct S2C_SavePlayerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_SavePlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MESSAGE = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_SavePlayerDataBuilder {
  typedef S2C_SavePlayerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_SavePlayerData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_SavePlayerData::VT_MESSAGE, message);
  }
  explicit S2C_SavePlayerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_SavePlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_SavePlayerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_SavePlayerData> CreateS2C_SavePlayerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_SavePlayerDataBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_SavePlayerData> CreateS2C_SavePlayerDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_SavePlayerData(
      _fbb,
      result,
      message__);
}

struct DatabasePacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DatabasePacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_EVENT_TYPE = 4,
    VT_PACKET_EVENT = 6,
    VT_CLIENT_SOCKET = 8
  };
  EventType packet_event_type() const {
    return static_cast<EventType>(GetField<uint8_t>(VT_PACKET_EVENT_TYPE, 0));
  }
  const void *packet_event() const {
    return GetPointer<const void *>(VT_PACKET_EVENT);
  }
  template<typename T> const T *packet_event_as() const;
  const S2C_Login *packet_event_as_S2C_Login() const {
    return packet_event_type() == EventType_S2C_Login ? static_cast<const S2C_Login *>(packet_event()) : nullptr;
  }
  const C2S_Login *packet_event_as_C2S_Login() const {
    return packet_event_type() == EventType_C2S_Login ? static_cast<const C2S_Login *>(packet_event()) : nullptr;
  }
  const S2C_Logout *packet_event_as_S2C_Logout() const {
    return packet_event_type() == EventType_S2C_Logout ? static_cast<const S2C_Logout *>(packet_event()) : nullptr;
  }
  const C2S_Logout *packet_event_as_C2S_Logout() const {
    return packet_event_type() == EventType_C2S_Logout ? static_cast<const C2S_Logout *>(packet_event()) : nullptr;
  }
  const S2C_CreateAccount *packet_event_as_S2C_CreateAccount() const {
    return packet_event_type() == EventType_S2C_CreateAccount ? static_cast<const S2C_CreateAccount *>(packet_event()) : nullptr;
  }
  const C2S_CreateAccount *packet_event_as_C2S_CreateAccount() const {
    return packet_event_type() == EventType_C2S_CreateAccount ? static_cast<const C2S_CreateAccount *>(packet_event()) : nullptr;
  }
  const S2C_ItemData *packet_event_as_S2C_ItemData() const {
    return packet_event_type() == EventType_S2C_ItemData ? static_cast<const S2C_ItemData *>(packet_event()) : nullptr;
  }
  const C2S_ItemData *packet_event_as_C2S_ItemData() const {
    return packet_event_type() == EventType_C2S_ItemData ? static_cast<const C2S_ItemData *>(packet_event()) : nullptr;
  }
  const S2C_ShopList *packet_event_as_S2C_ShopList() const {
    return packet_event_type() == EventType_S2C_ShopList ? static_cast<const S2C_ShopList *>(packet_event()) : nullptr;
  }
  const C2S_ShopList *packet_event_as_C2S_ShopList() const {
    return packet_event_type() == EventType_C2S_ShopList ? static_cast<const C2S_ShopList *>(packet_event()) : nullptr;
  }
  const S2C_ShopItems *packet_event_as_S2C_ShopItems() const {
    return packet_event_type() == EventType_S2C_ShopItems ? static_cast<const S2C_ShopItems *>(packet_event()) : nullptr;
  }
  const C2S_ShopItems *packet_event_as_C2S_ShopItems() const {
    return packet_event_type() == EventType_C2S_ShopItems ? static_cast<const C2S_ShopItems *>(packet_event()) : nullptr;
  }
  const S2C_ShopTransaction *packet_event_as_S2C_ShopTransaction() const {
    return packet_event_type() == EventType_S2C_ShopTransaction ? static_cast<const S2C_ShopTransaction *>(packet_event()) : nullptr;
  }
  const C2S_ShopTransaction *packet_event_as_C2S_ShopTransaction() const {
    return packet_event_type() == EventType_C2S_ShopTransaction ? static_cast<const C2S_ShopTransaction *>(packet_event()) : nullptr;
  }
  const S2C_PlayerData *packet_event_as_S2C_PlayerData() const {
    return packet_event_type() == EventType_S2C_PlayerData ? static_cast<const S2C_PlayerData *>(packet_event()) : nullptr;
  }
  const C2S_PlayerData *packet_event_as_C2S_PlayerData() const {
    return packet_event_type() == EventType_C2S_PlayerData ? static_cast<const C2S_PlayerData *>(packet_event()) : nullptr;
  }
  const S2C_MonsterData *packet_event_as_S2C_MonsterData() const {
    return packet_event_type() == EventType_S2C_MonsterData ? static_cast<const S2C_MonsterData *>(packet_event()) : nullptr;
  }
  const C2S_MonsterData *packet_event_as_C2S_MonsterData() const {
    return packet_event_type() == EventType_C2S_MonsterData ? static_cast<const C2S_MonsterData *>(packet_event()) : nullptr;
  }
  const S2C_PlayerChat *packet_event_as_S2C_PlayerChat() const {
    return packet_event_type() == EventType_S2C_PlayerChat ? static_cast<const S2C_PlayerChat *>(packet_event()) : nullptr;
  }
  const C2S_PlayerChat *packet_event_as_C2S_PlayerChat() const {
    return packet_event_type() == EventType_C2S_PlayerChat ? static_cast<const C2S_PlayerChat *>(packet_event()) : nullptr;
  }
  const S2C_CreateGameServer *packet_event_as_S2C_CreateGameServer() const {
    return packet_event_type() == EventType_S2C_CreateGameServer ? static_cast<const S2C_CreateGameServer *>(packet_event()) : nullptr;
  }
  const C2S_CreateGameServer *packet_event_as_C2S_CreateGameServer() const {
    return packet_event_type() == EventType_C2S_CreateGameServer ? static_cast<const C2S_CreateGameServer *>(packet_event()) : nullptr;
  }
  const S2C_GameServerList *packet_event_as_S2C_GameServerList() const {
    return packet_event_type() == EventType_S2C_GameServerList ? static_cast<const S2C_GameServerList *>(packet_event()) : nullptr;
  }
  const C2S_GameServerList *packet_event_as_C2S_GameServerList() const {
    return packet_event_type() == EventType_C2S_GameServerList ? static_cast<const C2S_GameServerList *>(packet_event()) : nullptr;
  }
  const S2C_JoinGameServer *packet_event_as_S2C_JoinGameServer() const {
    return packet_event_type() == EventType_S2C_JoinGameServer ? static_cast<const S2C_JoinGameServer *>(packet_event()) : nullptr;
  }
  const C2S_JoinGameServer *packet_event_as_C2S_JoinGameServer() const {
    return packet_event_type() == EventType_C2S_JoinGameServer ? static_cast<const C2S_JoinGameServer *>(packet_event()) : nullptr;
  }
  const S2C_CloseGameServer *packet_event_as_S2C_CloseGameServer() const {
    return packet_event_type() == EventType_S2C_CloseGameServer ? static_cast<const S2C_CloseGameServer *>(packet_event()) : nullptr;
  }
  const C2S_CloseGameServer *packet_event_as_C2S_CloseGameServer() const {
    return packet_event_type() == EventType_C2S_CloseGameServer ? static_cast<const C2S_CloseGameServer *>(packet_event()) : nullptr;
  }
  const S2C_SavePlayerData *packet_event_as_S2C_SavePlayerData() const {
    return packet_event_type() == EventType_S2C_SavePlayerData ? static_cast<const S2C_SavePlayerData *>(packet_event()) : nullptr;
  }
  const C2S_SavePlayerData *packet_event_as_C2S_SavePlayerData() const {
    return packet_event_type() == EventType_C2S_SavePlayerData ? static_cast<const C2S_SavePlayerData *>(packet_event()) : nullptr;
  }
  uint32_t client_socket() const {
    return GetField<uint32_t>(VT_CLIENT_SOCKET, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_EVENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_PACKET_EVENT) &&
           VerifyEventType(verifier, packet_event(), packet_event_type()) &&
           VerifyField<uint32_t>(verifier, VT_CLIENT_SOCKET, 4) &&
           verifier.EndTable();
  }
};

template<> inline const S2C_Login *DatabasePacket::packet_event_as<S2C_Login>() const {
  return packet_event_as_S2C_Login();
}

template<> inline const C2S_Login *DatabasePacket::packet_event_as<C2S_Login>() const {
  return packet_event_as_C2S_Login();
}

template<> inline const S2C_Logout *DatabasePacket::packet_event_as<S2C_Logout>() const {
  return packet_event_as_S2C_Logout();
}

template<> inline const C2S_Logout *DatabasePacket::packet_event_as<C2S_Logout>() const {
  return packet_event_as_C2S_Logout();
}

template<> inline const S2C_CreateAccount *DatabasePacket::packet_event_as<S2C_CreateAccount>() const {
  return packet_event_as_S2C_CreateAccount();
}

template<> inline const C2S_CreateAccount *DatabasePacket::packet_event_as<C2S_CreateAccount>() const {
  return packet_event_as_C2S_CreateAccount();
}

template<> inline const S2C_ItemData *DatabasePacket::packet_event_as<S2C_ItemData>() const {
  return packet_event_as_S2C_ItemData();
}

template<> inline const C2S_ItemData *DatabasePacket::packet_event_as<C2S_ItemData>() const {
  return packet_event_as_C2S_ItemData();
}

template<> inline const S2C_ShopList *DatabasePacket::packet_event_as<S2C_ShopList>() const {
  return packet_event_as_S2C_ShopList();
}

template<> inline const C2S_ShopList *DatabasePacket::packet_event_as<C2S_ShopList>() const {
  return packet_event_as_C2S_ShopList();
}

template<> inline const S2C_ShopItems *DatabasePacket::packet_event_as<S2C_ShopItems>() const {
  return packet_event_as_S2C_ShopItems();
}

template<> inline const C2S_ShopItems *DatabasePacket::packet_event_as<C2S_ShopItems>() const {
  return packet_event_as_C2S_ShopItems();
}

template<> inline const S2C_ShopTransaction *DatabasePacket::packet_event_as<S2C_ShopTransaction>() const {
  return packet_event_as_S2C_ShopTransaction();
}

template<> inline const C2S_ShopTransaction *DatabasePacket::packet_event_as<C2S_ShopTransaction>() const {
  return packet_event_as_C2S_ShopTransaction();
}

template<> inline const S2C_PlayerData *DatabasePacket::packet_event_as<S2C_PlayerData>() const {
  return packet_event_as_S2C_PlayerData();
}

template<> inline const C2S_PlayerData *DatabasePacket::packet_event_as<C2S_PlayerData>() const {
  return packet_event_as_C2S_PlayerData();
}

template<> inline const S2C_MonsterData *DatabasePacket::packet_event_as<S2C_MonsterData>() const {
  return packet_event_as_S2C_MonsterData();
}

template<> inline const C2S_MonsterData *DatabasePacket::packet_event_as<C2S_MonsterData>() const {
  return packet_event_as_C2S_MonsterData();
}

template<> inline const S2C_PlayerChat *DatabasePacket::packet_event_as<S2C_PlayerChat>() const {
  return packet_event_as_S2C_PlayerChat();
}

template<> inline const C2S_PlayerChat *DatabasePacket::packet_event_as<C2S_PlayerChat>() const {
  return packet_event_as_C2S_PlayerChat();
}

template<> inline const S2C_CreateGameServer *DatabasePacket::packet_event_as<S2C_CreateGameServer>() const {
  return packet_event_as_S2C_CreateGameServer();
}

template<> inline const C2S_CreateGameServer *DatabasePacket::packet_event_as<C2S_CreateGameServer>() const {
  return packet_event_as_C2S_CreateGameServer();
}

template<> inline const S2C_GameServerList *DatabasePacket::packet_event_as<S2C_GameServerList>() const {
  return packet_event_as_S2C_GameServerList();
}

template<> inline const C2S_GameServerList *DatabasePacket::packet_event_as<C2S_GameServerList>() const {
  return packet_event_as_C2S_GameServerList();
}

template<> inline const S2C_JoinGameServer *DatabasePacket::packet_event_as<S2C_JoinGameServer>() const {
  return packet_event_as_S2C_JoinGameServer();
}

template<> inline const C2S_JoinGameServer *DatabasePacket::packet_event_as<C2S_JoinGameServer>() const {
  return packet_event_as_C2S_JoinGameServer();
}

template<> inline const S2C_CloseGameServer *DatabasePacket::packet_event_as<S2C_CloseGameServer>() const {
  return packet_event_as_S2C_CloseGameServer();
}

template<> inline const C2S_CloseGameServer *DatabasePacket::packet_event_as<C2S_CloseGameServer>() const {
  return packet_event_as_C2S_CloseGameServer();
}

template<> inline const S2C_SavePlayerData *DatabasePacket::packet_event_as<S2C_SavePlayerData>() const {
  return packet_event_as_S2C_SavePlayerData();
}

template<> inline const C2S_SavePlayerData *DatabasePacket::packet_event_as<C2S_SavePlayerData>() const {
  return packet_event_as_C2S_SavePlayerData();
}

struct DatabasePacketBuilder {
  typedef DatabasePacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_event_type(EventType packet_event_type) {
    fbb_.AddElement<uint8_t>(DatabasePacket::VT_PACKET_EVENT_TYPE, static_cast<uint8_t>(packet_event_type), 0);
  }
  void add_packet_event(::flatbuffers::Offset<void> packet_event) {
    fbb_.AddOffset(DatabasePacket::VT_PACKET_EVENT, packet_event);
  }
  void add_client_socket(uint32_t client_socket) {
    fbb_.AddElement<uint32_t>(DatabasePacket::VT_CLIENT_SOCKET, client_socket, 0);
  }
  explicit DatabasePacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DatabasePacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DatabasePacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DatabasePacket> CreateDatabasePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    EventType packet_event_type = EventType_NONE,
    ::flatbuffers::Offset<void> packet_event = 0,
    uint32_t client_socket = 0) {
  DatabasePacketBuilder builder_(_fbb);
  builder_.add_client_socket(client_socket);
  builder_.add_packet_event(packet_event);
  builder_.add_packet_event_type(packet_event_type);
  return builder_.Finish();
}

inline bool VerifyEventType(::flatbuffers::Verifier &verifier, const void *obj, EventType type) {
  switch (type) {
    case EventType_NONE: {
      return true;
    }
    case EventType_S2C_Login: {
      auto ptr = reinterpret_cast<const S2C_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_Login: {
      auto ptr = reinterpret_cast<const C2S_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_Logout: {
      auto ptr = reinterpret_cast<const S2C_Logout *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_Logout: {
      auto ptr = reinterpret_cast<const C2S_Logout *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_CreateAccount: {
      auto ptr = reinterpret_cast<const S2C_CreateAccount *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_CreateAccount: {
      auto ptr = reinterpret_cast<const C2S_CreateAccount *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_ItemData: {
      auto ptr = reinterpret_cast<const S2C_ItemData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_ItemData: {
      auto ptr = reinterpret_cast<const C2S_ItemData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_ShopList: {
      auto ptr = reinterpret_cast<const S2C_ShopList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_ShopList: {
      auto ptr = reinterpret_cast<const C2S_ShopList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_ShopItems: {
      auto ptr = reinterpret_cast<const S2C_ShopItems *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_ShopItems: {
      auto ptr = reinterpret_cast<const C2S_ShopItems *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_ShopTransaction: {
      auto ptr = reinterpret_cast<const S2C_ShopTransaction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_ShopTransaction: {
      auto ptr = reinterpret_cast<const C2S_ShopTransaction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_PlayerData: {
      auto ptr = reinterpret_cast<const S2C_PlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_PlayerData: {
      auto ptr = reinterpret_cast<const C2S_PlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_MonsterData: {
      auto ptr = reinterpret_cast<const S2C_MonsterData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_MonsterData: {
      auto ptr = reinterpret_cast<const C2S_MonsterData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_PlayerChat: {
      auto ptr = reinterpret_cast<const S2C_PlayerChat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_PlayerChat: {
      auto ptr = reinterpret_cast<const C2S_PlayerChat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_CreateGameServer: {
      auto ptr = reinterpret_cast<const S2C_CreateGameServer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_CreateGameServer: {
      auto ptr = reinterpret_cast<const C2S_CreateGameServer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_GameServerList: {
      auto ptr = reinterpret_cast<const S2C_GameServerList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_GameServerList: {
      auto ptr = reinterpret_cast<const C2S_GameServerList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_JoinGameServer: {
      auto ptr = reinterpret_cast<const S2C_JoinGameServer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_JoinGameServer: {
      auto ptr = reinterpret_cast<const C2S_JoinGameServer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_CloseGameServer: {
      auto ptr = reinterpret_cast<const S2C_CloseGameServer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_CloseGameServer: {
      auto ptr = reinterpret_cast<const C2S_CloseGameServer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_SavePlayerData: {
      auto ptr = reinterpret_cast<const S2C_SavePlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_SavePlayerData: {
      auto ptr = reinterpret_cast<const C2S_SavePlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEventTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEventType(
        verifier,  values->Get(i), types->GetEnum<EventType>(i))) {
      return false;
    }
  }
  return true;
}

inline const DatabasePacket *GetDatabasePacket(const void *buf) {
  return ::flatbuffers::GetRoot<DatabasePacket>(buf);
}

inline const DatabasePacket *GetSizePrefixedDatabasePacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DatabasePacket>(buf);
}

inline bool VerifyDatabasePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DatabasePacket>(nullptr);
}

inline bool VerifySizePrefixedDatabasePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DatabasePacket>(nullptr);
}

inline void FinishDatabasePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DatabasePacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDatabasePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DatabasePacket> root) {
  fbb.FinishSizePrefixed(root);
}

#endif //FLATBUFFERS_GENERATED_USEREVENT_H_
